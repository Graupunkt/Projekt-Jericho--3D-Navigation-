<File version="3.2">
  <FileID>bd1fe044-9806-4680-b309-8ae8d4f76326</FileID>
  <LastExport>133051656928791822</LastExport>
  <Preview>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
sDw47lbmv5XyuOMSKg/OH39cQvPHn8cN34nlwXG3Mr8bF39+101o/oTGxZ0/uPz45a4bv9wdj+6X
UYNd978B4o5zw7ej3K3vVsrdvyoOTnez8uD8wWlvNH/ccmdC5TdaZtz+hMrjr/O3lgfHJbX8t9Zp
sDw4T7A8e/Zs1p9Ts5Zt+m3/Drjd628p2V3/8X7DHhEREf8euucA0qaN/G3PAPDvgBEREf+e/q5v
ARAAEBER/54SABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIA
EBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0o
AQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHR
hxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAR
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgB
ABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBER
fSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIA
EBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0o
AQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHR
hxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAR
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRh96WAHDvPXcr
TZo0iIiI+DcxLCxMUVHpfnsA6NStpx5M/oDSp0+PiIiIfxMjIyOVMWMmzViy4dYDwJ7TUreefZU2
TYRy5sypHDlyKHv27MqVK5fXdeOcwf6klDt/b3ncccF+N8/vLXfd213uhuOWx53nzyyPOy5+ufO3
lN9on//ocjd8K+Vu3O0udyZWHndcUsvdMhMrd92bLT+hcjfs+m80f/xyN+7PLncmVh53XFLL3TIT
K3fd213uhuOWx53ndpU7f2953HHBfjdPYuWu+2eXu+FbKXfjbrXcmdj8ccfFL3cmVO6WebPyYPdm
899qefZs2Wx8bs1evlm7TvyGOwDtO7+je+5OpoiICERERPybGBoaqsjIKB4CRERE9JN8CwAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH/u4A0L7z27o72V3eghAREfHv
YUhIiAWByN8eADp2fVfJH7hfUenSISIi4t/ENGnTKjo6428LABstASxev0dT5q/WtEXrEBER8e/i
wrWabt01O49p6+FLSQsAffsNHHv0krT54AVtP3ZFe07JSw+IiIj4N/Fq2+0a/50npDWb9yUeALp2
e2vKtn1HtXz9TkRERPybu3brfs1bvCrxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+47/+6/8Bh+ANAqVb52wAAAAASUVO
RK5CYII=</Preview>
  <Form>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
+uOo9fWitTybn88nH8//mn30byZe9+jrhe19/eO33ybzrzdnzvmde/Ehdv9YXKe//3Z9M/l46k+v
pul3jecfkq+fv29P20f+5OK3GJ11rycXZ799dr5f48+Ov1zY/s750eKr072efTq/+/p5MXYvZssv
f5za0/nZ3c43m5znT/3T7vTj2edT53yJr7340vpw97V9nny96Lamt3vbW5/xn63D/d3zo+60fepP
Rt0z9Me2f2G3Pm5dkVs5W35pn95Mr77skp/O7Yfj/nAvut8m7dm/D759vZnO7X8f7Gxf4Gv8270Y
Lk/Gn5eHO53bg7+24v29I3vyKb2v4WR+bs8+/XY92bm9Ovt07k0++n+NnPPu+cdh9PWiM/zy17T9
ZXz+19H4y/fj8WHr63irc/z5C1nwrd/9gmt/O8Xr+OHTdO5/O5/7/qyF1+3j9/Hskx9//fzlAzl/
98PXG/fi89XB/Kg1ae+Hv3/+8pF8vn3Xxe9oePf7zrdt8vPOVfw+Z/N4Gv8jFUdzRMpnDj3CjdjB
/6aO9Eh3lGciBdlfVnjFm0QWcVz6Phbo1ae8IWS8XXRt/mEN1KA6ewzZhsSQNWAmrJ3mWh0xQScG
V37bmGq5DIzHr8oIUJJghQHmMmwvkyTcoOmS3ewkvcwONqejrEQP3+4UxcS4FjZm56G4b/XQH9wp
YFQOKVKn9rasOBlHXzW+/bFDCgtZSa8/5LDDercrUUzv08pu1Lq/U9apO2cxOvfipbuyYh5TmovM
uZ/26dXmTF+0f1Wa4hOKnF00WV6lelJDuLRYaYGVwOVhqcRghNUjyiY3kZuzOO6uYlg8LE61WBDd
DaIDYMKx2yd5YOAtLi+AU3a73FjqDUkTQFYjt5wv7XtBcQE+xUh6eD+b9KKzyQNkal2ny0857jD7
CY8ge7FPJJqNd8wEGZHNGLy5R5hJUGII18spVe35ZBSi3U1nIb62YrL5vd8O/Rk/3ErMRex0SQs0
wGDE4kYO+dh59Kq4cDDokd4w/ChgZt6vKkXoN6a8/I/SIIWRf37rrW0Llv/Vq+KTfwck/23Wx8r8
bPqNKS//H5bBNCMZGwjwqoCBYAQ8vCw+ELRhIKB1Qc4HwUf8bz0hQJJ2i9ALkvg4WBWGH7ri0QD0
v0cBxfIsEtz2EO+LQ0DmDSy5eWvM54MPWwTw/ExwPlPmx31aYWDd3ymlBFYnwV5dTyPBvrj2Ev4t
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</Form>
  <Code><![CDATA[
$formProjectJericho_Load={
	#TODO: Initialize Form Controls here
	Write-Host "$($OrangeForeColor)- Pre Loading Main Application"
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Show-NotifyIcon
{
<#
	.SYNOPSIS
		Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
	
	.DESCRIPTION
		Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
		
	.PARAMETER NotifyIcon
     	The NotifyIcon control that will be displayed.
	
	.PARAMETER BalloonTipText
     	Sets the text to display in the balloon tip.
	
	.PARAMETER BalloonTipTitle
		Sets the Title to display in the balloon tip.
	
	.PARAMETER BalloonTipIcon	
		The icon to display in the ballon tip.
	
	.PARAMETER Timeout	
		The time the ToolTip Balloon will remain visible in milliseconds. 
		Default: 0 - Uses windows default.
#>
	 param(
	  [Parameter(Mandatory = $true, Position = 0)]
	  [ValidateNotNull()]
	  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
	  [Parameter(Mandatory = $true, Position = 1)]
	  [ValidateNotNullOrEmpty()]
	  [String]$BalloonTipText,
	  [Parameter(Position = 2)]
	  [String]$BalloonTipTitle = '',
	  [Parameter(Position = 3)]
	  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
	  [Parameter(Position = 4)]
	  [int]$Timeout = 0
 	)
	
	if($null -eq $NotifyIcon.Icon)
	{
		#Set a Default Icon otherwise the balloon will not show
		$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
	}
	
	$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
}



#endregion


$buttonShowLocationHotKey_Click = {
	
	if ($buttonShowLocationHotKey.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin" -Force
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin.exe"
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonAntiLogoffScript_Click = {

	#CHECK TOGGLE STATE (IF GREEN OR NOT)
	if ($buttonAntiLogoffScript.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AntiLogoffScript_V3" -Force
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AntiLogoffScript_V3.exe"
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonClearStarCitizenCach_Click={
	Clear-CacheSC
	$buttonClearStarCitizenCach.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
}

$buttonToggleIngameOverlay_Click = {
	
	if ($global:RunspaceOverlay.RunspaceStateInfo.State)
	{
		Start-Process "msg" -argumentlist "* runspace is open"
		$RunspaceOverlay.CloseAsync()
		$RunspaceOverlay.Dispose()
		#
		$pOverlay.Close()
		$pOverlay.Dispose()
		#
		$formIngameOverlay.Close()
	}
	else
	{
		Start-Process "msg" -argumentlist "* runspace not detected"
	}
}

$label1013061_Click={
	$global:exitflag = $true
}


$buttonAutoRunToggle_Click={
	if ($buttonAutoRunToggle.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AutorunToggle" -Force
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AutorunToggle.exe"
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonSelect_Click={
	$global:ShowPoiSelection = $true
}

$labelPlayerDayCondition_Click={
	#TODO: Place custom script here
	
}

$labelHourAngleDest_Click={
	#TODO: Place custom script here
	
}

$buttonDebugMode_Click={
	if ($buttonDebugMode.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		$global:debug = $false
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		$global:debug = $true
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$datagridview2_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tabcontrol1_Click={
	#TODO: Place custom script here
	
}

$buttonClearJerichoProcesse_Click={
	#TODO: Place custom script here
	$buttonClearJerichoProcesse.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	Start-Process pwsh.exe -argumentlist '-Command {Get-Runspace | ForEach {$_.Dispose()}'
	start-process cmd -WindowStyle Minimized -argumentlist '/c timeout /t 3 & taskkill /F /IM pwsh.exe'
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>