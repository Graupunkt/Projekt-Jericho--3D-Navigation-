<File version="3.2">
  <FileID>bd1fe044-9806-4680-b309-8ae8d4f76326</FileID>
  <LastExport>133053440816685126</LastExport>
  <Preview>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
sDw47lbmv5XyuOMSKg/OH39cQvPHn8cN34nlwXG3Mr8bF39+101o/oTGxZ0/uPz45a4bv9wdj+6X
UYNd978B4o5zw7ej3K3vVsrdvyoOTnez8uD8wWlvNH/ccmdC5TdaZtz+hMrjr/O3lgfHJbX8t9Zp
sDw4T7A8e/Zs1p9Ts5Zt+m3/Drjd628p2V3/8X7DHhEREf8euucA0qaN/G3PAPDvgBEREf+e/q5v
ARAAEBER/54SABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIA
EBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0o
AQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHR
hxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAR
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgB
ABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBER
fSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIA
EBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0o
AQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHR
hxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAR
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRh96WAHDvPXcr
TZo0iIiI+DcxLCxMUVHpfnsA6NStpx5M/oDSp0+PiIiIfxMjIyOVMWMmzViy4dYDwJ7TUreefZU2
TYRy5sypHDlyKHv27MqVK5fXdeOcwf6klDt/b3ncccF+N8/vLXfd213uhuOWx53nzyyPOy5+ufO3
lN9on//ocjd8K+Vu3O0udyZWHndcUsvdMhMrd92bLT+hcjfs+m80f/xyN+7PLncmVh53XFLL3TIT
K3fd213uhuOWx53ndpU7f2953HHBfjdPYuWu+2eXu+FbKXfjbrXcmdj8ccfFL3cmVO6WebPyYPdm
899qefZs2Wx8bs1evlm7TvyGOwDtO7+je+5OpoiICERERPybGBoaqsjIKB4CRERE9JN8CwAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH/u4A0L7z27o72V3eghAREfHv
YUhIiAWByN8eADp2fVfJH7hfUenSISIi4t/ENGnTKjo6428LABstASxev0dT5q/WtEXrEBER8e/i
wrWabt01O49p6+FLSQsAffsNHHv0krT54AVtP3ZFe07JSw+IiIj4N/Fq2+0a/50npDWb9yUeALp2
e2vKtn1HtXz9TkRERPybu3brfs1bvCrxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+47/+6/8Bh+ANAqVb52wAAAAASUVO
RK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formProjectJericho_Load={
	#TODO: Initialize Form Controls here
	Write-Host "$($OrangeForeColor)- Pre Loading Main Application"
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Show-NotifyIcon
{
<#
	.SYNOPSIS
		Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
	
	.DESCRIPTION
		Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
		
	.PARAMETER NotifyIcon
     	The NotifyIcon control that will be displayed.
	
	.PARAMETER BalloonTipText
     	Sets the text to display in the balloon tip.
	
	.PARAMETER BalloonTipTitle
		Sets the Title to display in the balloon tip.
	
	.PARAMETER BalloonTipIcon	
		The icon to display in the ballon tip.
	
	.PARAMETER Timeout	
		The time the ToolTip Balloon will remain visible in milliseconds. 
		Default: 0 - Uses windows default.
#>
	 param(
	  [Parameter(Mandatory = $true, Position = 0)]
	  [ValidateNotNull()]
	  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
	  [Parameter(Mandatory = $true, Position = 1)]
	  [ValidateNotNullOrEmpty()]
	  [String]$BalloonTipText,
	  [Parameter(Position = 2)]
	  [String]$BalloonTipTitle = '',
	  [Parameter(Position = 3)]
	  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
	  [Parameter(Position = 4)]
	  [int]$Timeout = 0
 	)
	
	if($null -eq $NotifyIcon.Icon)
	{
		#Set a Default Icon otherwise the balloon will not show
		$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
	}
	
	$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
}



#endregion


$buttonShowLocationHotKey_Click = {
	
	if ($buttonShowLocationHotKey.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin" -Force
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin.exe"
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonAntiLogoffScript_Click = {

	#CHECK TOGGLE STATE (IF GREEN OR NOT)
	if ($buttonAntiLogoffScript.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AntiLogoffScript_V3" -Force
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AntiLogoffScript_V3.exe"
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonClearStarCitizenCach_Click={
	Clear-CacheSC
	$buttonClearStarCitizenCach.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
}

$buttonToggleIngameOverlay_Click = {
	
	if ($global:RunspaceOverlay.RunspaceStateInfo.State)
	{
		Start-Process "msg" -argumentlist "* runspace is open"
		$RunspaceOverlay.CloseAsync()
		$RunspaceOverlay.Dispose()
		#
		$pOverlay.Close()
		$pOverlay.Dispose()
		#
		$formIngameOverlay.Close()
	}
	else
	{
		Start-Process "msg" -argumentlist "* runspace not detected"
	}
}

$label1013061_Click={
	$global:exitflag = $true
}


$buttonAutoRunToggle_Click={
	if ($buttonAutoRunToggle.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AutorunToggle" -Force
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AutorunToggle.exe"
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonSelect_Click={
	$global:ShowPoiSelection = $true
}

$labelPlayerDayCondition_Click={
	#TODO: Place custom script here
	
}

$labelHourAngleDest_Click={
	#TODO: Place custom script here
	
}

$buttonDebugMode_Click={
	if ($global:debug -eq $true)
	{
		$global:debug = $false
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		$global:debug = $true
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$datagridview2_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tabcontrol1_Click={
	#TODO: Place custom script here
	
}

$buttonClearJerichoProcesse_Click={
	#TODO: Place custom script here
	$buttonClearJerichoProcesse.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	Start-Process pwsh.exe -argumentlist '-Command {Get-Runspace | ForEach {$_.Dispose()}'
	start-process cmd -WindowStyle Minimized -argumentlist '/c timeout /t 3 & taskkill /F /IM pwsh.exe'
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>