<File version="3.2">
  <FileID>bd1fe044-9806-4680-b309-8ae8d4f76326</FileID>
  <LastExport>133049131200105521</LastExport>
  <Preview>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
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgB
ABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBER
fSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIA
EBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0o
AQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHR
hxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAR
EX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEA
ERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcS
ABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER
0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQ
ERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgB
ABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGH
EgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBER
fSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAR
EdGHEgAQERF9KAEAERHRhxIAEBERfSgBABER0YcSABAREX3oHwoArzRv96sJIiIi4q3vP/7xD01d
uPa3B4ADZ6VX33hHd931b6VMmVIpUqTwTJUqlZInT+71cwbbr1fu+t0p5cF+CctdM2G5645fHn+c
YLnz95THX6bbtdw1XXmw37XGj1/uuq83fsJy1y9hufNay3S7lAf7JSx3zYTlrvt648cvD/ZLWO68
0TLd6uXBfjd7/IT9klKe1Hne6eXBfgnLXTNhecJp3qjc9UtqefxlutXLg/0Slrtm/HLXnjp1as1e
vkl7T//GALDf7PR2D91/373KnDkzIiIi3iaGh4cra9ZsgQBw6rfeATA7dOmme+/5jzJkyICIiIi3
iWFhYcqUKbNmLdtIAEBERPSLBABEREQfSgBARET0oQQAREREH0oAQERE9KEEAERERB9KAEBERPSh
fzgAtO/8ru5Odpc3IURERLw9DAkJsSAQ/vsDQMeu7yv5/fcpY6ZMiIiIeJuYPkMGRURk/X0BYLMl
gGUb92n6ohjNXLoBERERbxeXrNcsa67bfVzbj15KWgDo03fA2GOXpK2HL2jn8Svad1peekBERMTb
xLi621X+u09K67YeuHEA6Pr2O9N3HDimVRt3IyIi4m3u+u0HtXDZ2hsHAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAf//Vf
/x+N/FoKGY0jMgAAAABJRU5ErkJggg==</Preview>
  <Form>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
x18ubH/n/Gjx1elezz6d3339vBi7F7Pllz9O7en87G7nm03O86f+aXf68ezzqXO+xNdefGl9uPva
Pk++XnRb09u97a3P+M/W4f7u+VF32j71J6PuGfpj27+wWx+3rsitnC2/tE9vpldfdslP5/bDcX+4
F91vk/bs3wffvt5M5/a/D3a2L/A1/u1eDJcn48/Lw53O7cFfW/H+3pE9+ZTe13AyP7dnn367nuzc
Xp19OvcmH/2/Rs559/zjMPp60Rl++Wva/jI+/+to/OX78fiw9XW81Tn+/IUs+NbvfsG1v53idfzw
aTr3v53PfX/Wwuv28ft49smPv37+8oGcv/vh64178fnqYH7UmrT3w98/f/lIPt++6+J3NLz7fefb
Nvl55yp+n7N5PI3/kYqjOSLlM4ce4Ubs4H9TR3qkO8ozkYLsLyu84k0iizgufR8L9OpT3hAy3i66
Nv+wBmpQnT2GbENiyBowE9ZOc62OmKATgyu/bUy1XAbG41dlBChJsMIAcxm2l0kSbtB0yW52kl5m
F02WVynaxc3WeajoWz3pB3cKmI9DKtNbrOSmkhm4J0vFtxN2SAkhK731h8R1WO26+2Hv+OYsjrs7
i9G5Fy/dlYnymK9cZKv9tAmvdt4ni/OvSpN2omvaOwA+D/sumwcG3hLZAjhlt8uNpd6QtDJjVdXl
PALfC4rLiClb/cP72aQvkPVPd9Ip4PzEyQ6ztfMIshf7RKLZ2JNMkBFZUu7NPcKvgKa3uV5OqZq1
JwPd7G460e21FZPN7/126M/44VZiulunSxo5Aca7FZej52Pn0aviwsGgRzpc8KOAmT+84rvTb0x5
+R+lrpaRf37rrW0Llv/Vq+KTfwck/23Wx8q8BfqNKS//H5bBNKNKGgjwqoCBYAQ8vCw+ELRhIKD1
cs0HwUf8bz0hQFIPi9ALkvg4WJW3Hrri0QD0v0cBxfIsEtz2EO+LQ0D+ACy5eWvM54MPWwTw/HxW
PlPmx31aYWDd3ymlkE8nwV5dTyPBvrj2Ev4tOZXsHiCmVIlk3y8yl2Q7LZhk89koPwv2/Y1WKdii
4zxthqFfSsU7e+RFD5lDLeXinT9WiTXaUmasd5c0Z2OOdj6IMJ+FYbcoJY96iOva1I+K4tpjjXpX
Ja6sIiFDXJnDiZm4ViitQhNKROOfLoNxeHXl65hUsgesUlRJUumn5RKSWGI2FlJBzO7P4rrBcRj6
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
pkW8P5ZxHZkPZ13K+3/Gv/5/yh4EFclrBQA=</Form>
  <Code><![CDATA[
$formProjectJericho_Load={
	#TODO: Initialize Form Controls here
	Write-Host "$($OrangeForeColor)- Pre Loading Main Application"
}

#region Control Helper Functions
<#
	.SYNOPSIS
		Sets the emulation of the WebBrowser control for the application.
	
	.DESCRIPTION
		Sets the emulation of the WebBrowser control for the application using the installed version of IE.
		This improves the WebBrowser control compatibility with newer html features.
	
	.PARAMETER ExecutableName
		The name of the executable E.g. PowerShellStudio.exe.
		Default Value: The running executable name.
	
	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation

	.EXAMPLE
		PS C:\> Set-WebBrowserEmulation PowerShell.exe
#>
function Set-WebBrowserEmulation
{
	param
	(
		[ValidateNotNullOrEmpty()]
		[string]
		$ExecutableName = [System.IO.Path]::GetFileName([System.Diagnostics.Process]::GetCurrentProcess().MainModule.FileName)
	)
	
	#region Get IE Version
	$valueNames = 'svcVersion', 'svcUpdateVersion', 'Version', 'W2kVersion'
	
	$version = 0;
	for ($i = 0; $i -lt $valueNames.Length; $i++)
	{
		$objVal = [Microsoft.Win32.Registry]::GetValue('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer', $valueNames[$i], '0')
		$strVal = [System.Convert]::ToString($objVal)
		if ($strVal)
		{
			$iPos = $strVal.IndexOf('.')
			if ($iPos -gt 0)
			{
				$strVal = $strVal.Substring(0, $iPos)
			}
			
			$res = 0;
			if ([int]::TryParse($strVal, [ref]$res))
			{
				$version = [Math]::Max($version, $res)
			}
		}
	}
	
	if ($version -lt 7)
	{
		$version = 7000
	}
	else
	{
		$version = $version * 1000
	}
	#endregion
	
	[Microsoft.Win32.Registry]::SetValue('HKEY_CURRENT_USER\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION', $ExecutableName, $version)
}



function Update-Chart
{
<#
    .SYNOPSIS
        This functions helps you plot points on a chart.
    
    .DESCRIPTION
        Use the function to plot points on a chart or add more charts to a chart control.
    
    .PARAMETER ChartControl
        The Chart Control you when to add points to.
    
    .PARAMETER XPoints
        Set the X Axis Points. These can be strings or numerical values.
    
    .PARAMETER YPoints
        Set the Y Axis Points. These can be strings or numerical values.
    
    .PARAMETER XTitle
        Set the Title for the X Axis.
    
    .PARAMETER YTitle
        Set the Title for the Y Axis.
    
    .PARAMETER Title
        Set the Title for the chart.
    
    .PARAMETER ChartType
        Set the Style of the chart. See System.Windows.Forms.DataVisualization.Charting.SeriesChartType Enum.
    
    .PARAMETER SeriesIndex
        Set the settings of a particular Series and corresponding ChartArea.
    
    .PARAMETER TitleIndex
        Set the settings of a particular Title.
    
    .PARAMETER SeriesName
        Set the settings of a particular Series using its name and corresponding ChartArea.
        The Series will be created if not found.
        If SeriesIndex is set, it will replace the Series' name if the Series does not exist.
    
    .PARAMETER Enable3D
        The chart will be rendered in 3D.
    
    .PARAMETER Disable3D
        The chart will be rendered in 2D.
    
    .PARAMETER AppendNew
        When this switch is used, a new ChartArea is added to Chart Control.
    
    .NOTES
        Additional information about the function.
    
    .LINK
        http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	
	param
	(
		[Parameter(Mandatory = $true, Position = 1)]
		[ValidateNotNull()]
		[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl,
		[Parameter(Mandatory = $true, Position = 2)]
		[ValidateNotNull()]
		$XPoints,
		[Parameter(Mandatory = $true, Position = 3)]
		[ValidateNotNull()]
		$YPoints,
		[Parameter(Mandatory = $false, Position = 4)]
		[string]$XTitle,
		[Parameter(Mandatory = $false, Position = 5)]
		[string]$YTitle,
		[Parameter(Mandatory = $false, Position = 6)]
		[string]$Title,
		[Parameter(Mandatory = $false, Position = 7)]
		[System.Windows.Forms.DataVisualization.Charting.SeriesChartType]$ChartType,
		[Parameter(Mandatory = $false, Position = 8)]
		[int]$SeriesIndex = -1,
		[Parameter(Mandatory = $false, Position = 9)]
		[int]$TitleIndex = 0,
		[Parameter(Mandatory = $false)]
		[string]$SeriesName = $null,
		[switch]$Enable3D,
		[switch]$Disable3D,
		[switch]$AppendNew
	)
	
	$ChartAreaIndex = 0
	if ($AppendNew)
	{
		$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
		$ChartArea = $ChartControl.ChartAreas.Add($name)
		$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		
		$name = "Series " + ($ChartControl.Series.Count + 1).ToString();
		$Series = $ChartControl.Series.Add($name)
		$SeriesIndex = $ChartControl.Series.Count - 1
		
		$Series.ChartArea = $ChartArea.Name
	}
	else
	{
		if ($ChartControl.ChartAreas.Count -eq 0)
		{
			$name = "ChartArea " + ($ChartControl.ChartAreas.Count + 1).ToString();
			[void]$ChartControl.ChartAreas.Add($name)
			$ChartAreaIndex = $ChartControl.ChartAreas.Count - 1
		}
		
		if ($ChartControl.Series.Count -eq 0)
		{
			if (-not $SeriesName)
			{
				$SeriesName = "Series " + ($ChartControl.Series.Count + 1).ToString();
			}
			
			$Series = $ChartControl.Series.Add($SeriesName)
			$SeriesIndex = $ChartControl.Series.Count - 1
			$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
		}
		elseif ($SeriesName)
		{
			$Series = $ChartControl.Series.FindByName($SeriesName)
			
			if ($null -eq $Series)
			{
				if (($SeriesIndex -gt -1) -and ($SeriesIndex -lt $ChartControl.Series.Count))
				{
					$Series = $ChartControl.Series[$SeriesIndex]
					$Series.Name = $SeriesName
				}
				else
				{
					$Series = $ChartControl.Series.Add($SeriesName)
					$SeriesIndex = $ChartControl.Series.Count - 1
				}
				
				$Series.ChartArea = $ChartControl.ChartAreas[$ChartAreaIndex].Name
			}
			else
			{
				$SeriesIndex = $ChartControl.Series.IndexOf($Series)
				$ChartAreaIndex = $ChartControl.ChartAreas.IndexOf($Series.ChartArea)
			}
		}
	}
	
	if (($SeriesIndex -lt 0) -or ($SeriesIndex -ge $ChartControl.Series.Count))
	{
		$SeriesIndex = 0
	}
	
	$Series = $ChartControl.Series[$SeriesIndex]
	$Series.Points.Clear()
	$ChartArea = $ChartControl.ChartAreas[$Series.ChartArea]
	
	if ($Enable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $true
	}
	elseif ($Disable3D)
	{
		$ChartArea.Area3DStyle.Enable3D = $false
	}
	
	if ($Title)
	{
		if ($ChartControl.Titles.Count -eq 0)
		{
			#$name = "Title " + ($ChartControl.Titles.Count + 1).ToString();
			$TitleObj = $ChartControl.Titles.Add($Title)
			$TitleIndex = $ChartControl.Titles.Count - 1
			$TitleObj.DockedToChartArea = $ChartArea.Name
			$TitleObj.IsDockedInsideChartArea = $false
		}
		
		$ChartControl.Titles[$TitleIndex].Text = $Title
	}
	
	if ($ChartType)
	{
		$Series.ChartType = $ChartType
	}
	
	if ($XTitle)
	{
		$ChartArea.AxisX.Title = $XTitle
	}
	
	if ($YTitle)
	{
		$ChartArea.AxisY.Title = $YTitle
	}
	
	if ($XPoints -isnot [Array] -or $XPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($XPoints)
		$XPoints = $array
	}
	
	if ($YPoints -isnot [Array] -or $YPoints -isnot [System.Collections.IEnumerable])
	{
		$array = New-Object System.Collections.ArrayList
		$array.Add($YPoints)
		$YPoints = $array
	}
	
	$Series.Points.DataBindXY($XPoints, $YPoints)
}



function Clear-Chart
{
<#
	.SYNOPSIS
		This function clears the contents of the chart.

	.DESCRIPTION
		Use the function to remove contents from the chart control.

	.PARAMETER  ChartControl
		The Chart Control to clear.

	.PARAMETER  LeaveSingleChart
		Leaves the first chart and removes all others from the control.
	
	.LINK
		http://www.sapien.com/blog/2011/05/05/primalforms-2011-designing-charts-for-powershell/
#>
	Param (	
	[ValidateNotNull()]
	[Parameter(Position=1,Mandatory=$true)]
  	[System.Windows.Forms.DataVisualization.Charting.Chart]$ChartControl
	,
	[Parameter(Position=2, Mandatory=$false)]
	[Switch]$LeaveSingleChart
	)
	
	$count = 0	
	if($LeaveSingleChart)
	{
		$count = 1
	}
	
	while($ChartControl.Series.Count -gt $count)
	{
		$ChartControl.Series.RemoveAt($ChartControl.Series.Count - 1)
	}
	
	while($ChartControl.ChartAreas.Count -gt $count)
	{
		$ChartControl.ChartAreas.RemoveAt($ChartControl.ChartAreas.Count - 1)
	}
	
	while($ChartControl.Titles.Count -gt $count)
	{
		$ChartControl.Titles.RemoveAt($ChartControl.Titles.Count - 1)
	}
	
	if($ChartControl.Series.Count -gt 0)
	{
		$ChartControl.Series[0].Points.Clear()
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Show-NotifyIcon
{
<#
	.SYNOPSIS
		Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
	
	.DESCRIPTION
		Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
		
	.PARAMETER NotifyIcon
     	The NotifyIcon control that will be displayed.
	
	.PARAMETER BalloonTipText
     	Sets the text to display in the balloon tip.
	
	.PARAMETER BalloonTipTitle
		Sets the Title to display in the balloon tip.
	
	.PARAMETER BalloonTipIcon	
		The icon to display in the ballon tip.
	
	.PARAMETER Timeout	
		The time the ToolTip Balloon will remain visible in milliseconds. 
		Default: 0 - Uses windows default.
#>
	 param(
	  [Parameter(Mandatory = $true, Position = 0)]
	  [ValidateNotNull()]
	  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
	  [Parameter(Mandatory = $true, Position = 1)]
	  [ValidateNotNullOrEmpty()]
	  [String]$BalloonTipText,
	  [Parameter(Position = 2)]
	  [String]$BalloonTipTitle = '',
	  [Parameter(Position = 3)]
	  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
	  [Parameter(Position = 4)]
	  [int]$Timeout = 0
 	)
	
	if($null -eq $NotifyIcon.Icon)
	{
		#Set a Default Icon otherwise the balloon will not show
		$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
	}
	
	$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
}



#endregion


$buttonShowLocationHotKey_Click = {
	
	if ($buttonShowLocationHotKey.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin" -Force
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\Script_Showlocation_Hotkey ALT-GR or LEFTCTRL+ALT_RunAsAdmin.exe"
		$buttonShowLocationHotKey.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonAntiLogoffScript_Click = {

	#CHECK TOGGLE STATE (IF GREEN OR NOT)
	if ($buttonAntiLogoffScript.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AntiLogoffScript_V3" -Force
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AntiLogoffScript_V3.exe"
		$buttonAntiLogoffScript.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonClearStarCitizenCach_Click={
	Clear-CacheSC
	$buttonClearStarCitizenCach.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
}

$buttonToggleIngameOverlay_Click = {
	
	if ($global:RunspaceOverlay.RunspaceStateInfo.State)
	{
		Start-Process "msg" -argumentlist "* runspace is open"
		$RunspaceOverlay.CloseAsync()
		$RunspaceOverlay.Dispose()
		#
		$pOverlay.Close()
		$pOverlay.Dispose()
		#
		$formIngameOverlay.Close()
	}
	else
	{
		Start-Process "msg" -argumentlist "* runspace not detected"
	}
}

$label1013061_Click={
	$global:exitflag = $true
}


$buttonAutoRunToggle_Click={
	if ($buttonAutoRunToggle.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		Stop-Process -Name "AutorunToggle" -Force
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		Start-Process "$script:ScriptDir\AutorunToggle.exe"
		$buttonAutoRunToggle.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$buttonSelect_Click={
	$global:ShowPoiSelection = $true
}

$labelPlayerDayCondition_Click={
	#TODO: Place custom script here
	
}

$labelHourAngleDest_Click={
	#TODO: Place custom script here
	
}

$buttonDebugMode_Click={
	if ($buttonDebugMode.ForeColor -eq [System.Drawing.Color]::FromArgb(50, 250, 50))
	{
		$global:debug = $false
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(250, 50, 50)
	}
	else
	{
		$global:debug = $true
		$buttonDebugMode.ForeColor = [System.Drawing.Color]::FromArgb(50, 250, 50)
	}
}

$datagridview2_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
}

$tabcontrol1_Click={
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>